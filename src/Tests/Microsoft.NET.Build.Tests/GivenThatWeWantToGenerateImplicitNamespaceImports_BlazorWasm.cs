// Copyright (c) .NET Foundation and contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System.IO;
using FluentAssertions;
using Microsoft.NET.TestFramework;
using Microsoft.NET.TestFramework.Assertions;
using Microsoft.NET.TestFramework.Commands;
using Microsoft.NET.TestFramework.ProjectConstruction;
using Xunit;
using Xunit.Abstractions;

namespace Microsoft.NET.Build.Tests
{
    public class GivenThatWeWantToGenerateImplicitNamespaceImports_BlazorWasm : SdkTest
    {
        public GivenThatWeWantToGenerateImplicitNamespaceImports_BlazorWasm(ITestOutputHelper log) : base(log) { }

        [RequiresMSBuildVersionFact("17.0.0.32901")]
        public void It_generates_blazorwasm_imports_and_builds_successfully()
        {
            var tfm = "net6.0";
            var testProject = CreateTestProject(tfm);
            var testAsset = _testAssetsManager.CreateTestProject(testProject);
            var importFileName = $"{testAsset.TestProject.Name}.ImplicitNamespaceImports.cs";

            var buildCommand = new BuildCommand(testAsset);
            buildCommand
                .Execute()
                .Should()
                .Pass();

            var outputDirectory = buildCommand.GetIntermediateDirectory(tfm);

            outputDirectory.Should().HaveFile(importFileName);

            File.ReadAllText(Path.Combine(outputDirectory.FullName, importFileName)).Should().Be(
@"// <autogenerated />
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Logging;
");
        }

        [Fact]
        public void It_can_disable_blazorwasm_imports()
        {
            var tfm = "net6.0";
            var testProject = CreateTestProject(tfm);
            testProject.AdditionalProperties["DisableImplicitNamespaceImports_BlazorWasm"] = "true";
            var testAsset = _testAssetsManager.CreateTestProject(testProject);
            var importFileName = $"{testAsset.TestProject.Name}.ImplicitNamespaceImports.cs";

            var buildCommand = new BuildCommand(testAsset);
            buildCommand
                .Execute()
                .Should()
                .Fail();

            var outputDirectory = buildCommand.GetIntermediateDirectory(tfm);

            outputDirectory.Should().HaveFile(importFileName);

            File.ReadAllText(Path.Combine(outputDirectory.FullName, importFileName)).Should().Be(
@"// <autogenerated />
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
");
        }

        private TestProject CreateTestProject(string tfm)
        {
            var testProject = new TestProject
            {
                IsExe = true,
                TargetFrameworks = tfm,
                ProjectSdk = "Microsoft.NET.Sdk.BlazorWebAssembly"
            };
            testProject.PackageReferences.Add(new TestPackageReference("Microsoft.AspNetCore.Components.WebAssembly", "5.0.0"));
            testProject.SourceFiles["Program.cs"] = @"
using Microsoft.AspNetCore.Components.WebAssembly.Hosting;

var builder = WebAssemblyHostBuilder.CreateDefault(args);

builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });

await builder.Build().RunAsync();
";
            return testProject;
        }
    }
}
